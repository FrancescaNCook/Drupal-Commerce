<?php

/**
 *  Multisafepay payment module for Commerce
 *  Implements Multisafepay payment method for use with Drupal Commerce.
 *
 *  @version 1.0.0
 *  @author Ruud Jonk
 *  @copyright Copyright (c) 2012 Multisafepay
 *  www.multisafepay.com
 *
 */
include_once 'includes/multisafepay_helper.php';
include_once 'includes/api/MultiSafepay.combined.php';

$helper = null;

/**
 * Implements hook_menu().
 */
function commerce_multisafepay_menu() {
    $items = array();

    $items[multisafepay_helper()->getResultCode()] = array(
        'page callback' => 'commerce_multisafepay_process_result',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items[multisafepay_helper()->getPostbackCode()] = array(
        'page callback' => 'commerce_multisafepay_process_postback',
        'page arguments' => array(0, 1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['multisafepay/postback'] = array(
        'page callback' => 'commerce_multisafepay_process_postback',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function multisafepay_helper() {
    global $helper;
    if ($helper == null)
        $helper = new drupalcommerceMultisafepayHelper();
    return $helper;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_multisafepay_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['multisafepay'] = array(
        'base' => 'commerce_multisafepay',
        'title' => 'multisafepay',
        'display_title' => variable_get('multisafepay_title', 'multisafepay '),
        'description' => t('Enable payments using multisafepay Global payments'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );
    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_multisafepay_settings_form($settings = NULL) {
    $form = array();
    global $base_url;

    if (isset($settings['multisafepay_account_id']))
        variable_set('multisafepay_account_id', $settings['multisafepay_account_id']);     // persist account id

    if (isset($settings['multisafepay_site_id']))
        variable_set('multisafepay_site_id', $settings['multisafepay_site_id']);      // persist site id	

    if (isset($settings['multisafepay_secure_code']))
        variable_set('multisafepay_secure_code', $settings['multisafepay_secure_code']);    // secure code

    if (isset($settings['multisafepay_title']))
        variable_set('multisafepay_title', $settings['multisafepay_title']);    // title

    if (isset($settings['multisafepay_test']))
        variable_set('multisafepay_test', $settings['multisafepay_test']);    // title

    if (isset($settings['multisafepay_info']))
        variable_set('multisafepay_info', $settings['multisafepay_info']);    // title

    if (isset($settings['multisafepay_gateway_selection']))
        variable_set('multisafepay_gateway_selection', $settings['multisafepay_gateway_selection']);    // title

    if (isset($settings['issuer_selection']))
        variable_set('issuer_selection', $settings['issuer_selection']);    // title



    $form['multisafepay_module_info'] = array(
        '#type' => 'item',
        '#title' => 'Module information',
        '#description' => multisafepay_helper()->getInfo()
    );

    $form['multisafepay_url_notify'] = array(
        '#type' => 'textfield',
        '#title' => 'URL for Success, Error and Postback:',
        '#default_value' => multisafepay_helper()->getPostbackURL(),
        // '#disabled' => 'disabled',  
        '#description' => t('Copy-paste this into your multisafepay website configuration. This URL is generated for display and can not be changed.'),
    );

    $form['multisafepay_test'] = array(
        '#required' => TRUE,
        '#type' => 'radios',
        '#title' => t('Test or Production'),
        '#default_value' => variable_get('multisafepay_test', 1),
        '#options' => array(
            t('Production'),
            t('Test'),
        )
    );

    $form['multisafepay_account_id'] = array(
        '#type' => 'textfield',
        '#title' => 'Account Id',
        '#default_value' => variable_get('multisafepay_account_id', ''),
        '#description' => t('Enter the account id. You can find it in the Multisafepay dashboard'),
        '#required' => TRUE,
    );

    $form['multisafepay_site_id'] = array(
        '#type' => 'textfield',
        '#title' => 'Site Id',
        '#default_value' => variable_get('multisafepay_site_id', ''),
        '#description' => t('Enter the site id. You can find it in the Multisafepay dashboard website configuration'),
        '#required' => TRUE,
    );

    $form['multisafepay_secure_code'] = array(
        '#type' => 'textfield',
        '#title' => 'Secure Code',
        '#default_value' => variable_get('multisafepay_secure_code', ''),
        '#description' => t('Enter the secure code. You can find it in the Multisafepay dashboard website configuration'),
        '#required' => TRUE,
    );
    $form['multisafepay_gateway_selection'] = array(
        '#required' => TRUE,
        '#type' => 'radios',
        '#title' => t('Enable gateway selection'),
        '#default_value' => variable_get('multisafepay_gateway_selection', 0),
        '#options' => array(
            t('True'),
            t('False'),
        )
    );

    $form['issuer_selection'] = array(
        '#required' => TRUE,
        '#type' => 'radios',
        '#title' => t('Enable iDeal bank selection'),
        '#default_value' => variable_get('issuer_selection', 0),
        '#options' => array(
            t('True'),
            t('False'),
        )
    );

    $form['multisafepay_title'] = array(
        '#type' => 'textfield',
        '#title' => 'Title in Checkout',
        '#default_value' => isset($settings['multisafepay_title']) ? $settings['multisafepay_title'] : t('multisafepay '),
        '#description' => t('The title of the payment method displayed to customers in checkout'),
    );

    $form['multisafepay_info'] = array(
        '#type' => 'textarea',
        '#title' => 'Payment method description',
        '#default_value' => isset($settings['multisafepay_info']) ? $settings['multisafepay_info'] : t('After completing the checkout you will be redirected to select your preferred paymentmethod'),
        '#description' => t('The description of the payment method displayed to customers in checkout. (The logo can be changed by editing the CSS)'),
    );
    return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_multisafepay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

    $msp = new MultiSafepay();
    $msp->test = variable_get('multisafepay_test');
    $msp->merchant['account_id'] = variable_get('multisafepay_account_id');
    $msp->merchant['site_id'] = variable_get('multisafepay_site_id');
    $msp->merchant['site_code'] = variable_get('multisafepay_secure_code');
    $gateways = $msp->getGateways();
    $iDealIssuers = $msp->getIdealIssuers();
    $idealselect = '<select name="commerce_payment[payment_details][issuer]" id="issuerselect">';

    $issuers = array();

    if (variable_get('multisafepay_test')) {
        foreach ($iDealIssuers['issuers'] as $issuer) {

            $issuers[$issuer['code']['VALUE']] = t($issuer['description']['VALUE']);
        }
    } else {
        foreach ($iDealIssuers['issuers']['issuer'] as $issuer) {
            $issuers[$issuer['code']['VALUE']] = t($issuer['description']['VALUE']);
        }
    }


    $idealselect .= '</select>';

    $gateway_info = array(
        'BABYGIFTCARD' => 'Baby giftcard',
        'BANKTRANS' => 'Bank Transfer',
        'BOEKENBON' => 'Boekenbon',
        'DIRDEB' => 'Direct Debit',
        'DIRECTBANK' => 'Direct Ebanking',
        'E-BON' => 'E-bon',
        'EROTIEKBON' => 'Erotiekbon',
        'FIJNCADEAU' => 'Fijncadeau',
        'GIROPAY' => 'GiroPay',
        'IDEAL' => 'iDeal',
        'MAESTRO' => 'Maestro',
        'MASTERCARD' => 'Mastercard',
        'MISTERCASH' => 'Mister Cash',
        'WALLET' => 'Multisafepay Wallet',
        'PARFUMCADEAUKAART' => 'Parfum cadeaukaart',
        'PARFUMNL' => 'Parfum nl',
        'VISA' => 'Visa',
        'WEBSHOPGIFTCARD' => 'Webshop giftcard',
        'PAYAFTER' => 'Betaal na Ontvangst',
        'PAYPAL' => 'PayPal',
        'AMEX' => 'American Express'
    );


    $gatewaylist = '';
    $gateway_sort = array();
    $gateway_sort = $gateways;
    unset($gateway_sort['IDEAL']);

    $i = 1;
    foreach ($gateways as $key => $value) {
        if ($key == 'IDEAL') {
            $gateway_sort = array_reverse($gateway_sort, true);
            $gateway_sort[$key] = $value;
            $gateway_sort[$key]['id'] = $key;
            $gateway_sort[$key]['description'] = $key;
            $gateway_sort = array_reverse($gateway_sort, true);
        }
        $i++;
    }
    $methods = array();
    foreach ($gateway_sort as $key => $value) {
        if ($key == 'IDEAL') {
            $methods[$key] = t($gateway_info[$key]);
        } else {
            $methods[$key] = t($gateway_info[$key]);
        }
    }


    commerce_checkout_pane_save($checkout_pane);
    global $base_url;
    $form = array();
    $form['commerce_multisafepay_description'] = array(
        '#markup' => '<div style="border-top:1px solid gray;margin-top:10px;padding-top:10px;"><img src="' . $base_url . '/modules/commerce_multisafepay/images/msp.png" width="211" height="39" /><br /><br /><b>' . t($payment_method['settings']['multisafepay_info']) . '</b><br /><br /></div>',
        '#attached' => array(
            'css' => array(drupal_get_path('module', 'commerce_multisafepay') . '/theme/commerce_multisafepay.css'),
            'js' => array(drupal_get_path('module', 'commerce_multisafepay') . '/theme/commerce_multisafepay.js'),
    ));

    if (!variable_get('multisafepay_gateway_selection')) {
        $form['multisafepay_gateway'] = array(
            '#required' => TRUE,
            '#type' => 'radios',
            '#title' => t('Select your payment method'),
            '#default_value' => variable_get('multisafepay_gateway', 'IDEAL'),
            '#options' => $methods,
                //'#description' => '<div id="issuer"><img src="'.$base_url.'/modules/commerce_multisafepay/images/veilig-betalen-ideal.png" border="0" width="252" height="69"/><br /><b class="bigger">'.t('Kies uw bank').'</b><br /><br />'.$idealselect.'<div>'
        );
    }
    if (!variable_get('issuer_selection') && !variable_get('multisafepay_gateway_selection')) {
        $form['issuer_holder'] = array(
            '#type' => 'item',
            '#title' => '',
            '#description' => '<div id="issuer"><img src="' . $base_url . '/modules/commerce_multisafepay/images/veilig-betalen-ideal.png" border="0" width="252" height="69"/><br /><b class="bigger">' . t('Kies uw bank') . '</b><div>'
        );

        $form['issuer'] = array(
            //'#required' => TRUE,
            '#type' => 'select',
            //'#title' => t('Select your payment method'),
            //'#default_value' => variable_get('multisafepay_gateway', 'IDEAL'),
            '#options' => $issuers,
        );
    }


    $form['dummy'] = array(
        '#type' => 'hidden',
        '#value' => 'dummy'
    );

    return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_multisafepay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
    commerce_cart_order_session_save($order->order_id); //commerce_cart_orders
    $order->data['commerce_multisafepay'] = $pane_values;
    $order->data['commerce_multisafepay_orderid'] = commerce_multisafepay_transaction($payment_method, $order, $charge);
}

/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_multisafepay_transaction($payment_method, $order, $charge) {
    $transaction = commerce_payment_transaction_new('commerce_multisafepay', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->remote_id = $transaction->transaction_id;
    $transaction->remote_status = "INITIALIZED";
    $transaction->message = t('This order is waiting for processing.');

    commerce_payment_transaction_save($transaction);
    return $transaction->transaction_id;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building multisafepay form.
 */
function commerce_multisafepay_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabling action's settings haven't been configured.
    if (empty($payment_method['settings']['multisafepay_account_id']) || empty($payment_method['settings']['multisafepay_site_id']) || empty($payment_method['settings']['multisafepay_secure_code'])) {
        drupal_set_message(t('Multisafepay plugin is not configured for use. Account ID, Site ID and/or Secure Code is not set.'), 'error');
        return array();
    }

    //Store the correct merchant data and prevent caching
    if (isset($payment_method['settings']['multisafepay_account_id']))
        variable_set('multisafepay_account_id', $payment_method['settings']['multisafepay_account_id']);

    if (isset($payment_method['settings']['multisafepay_site_id']))
        variable_set('multisafepay_site_id', $payment_method['settings']['multisafepay_site_id']);

    if (isset($payment_method['settings']['multisafepay_secure_code']))
        variable_set('multisafepay_secure_code', $payment_method['settings']['multisafepay_secure_code']);

    if (isset($payment_method['settings']['multisafepay_title']))
        variable_set('multisafepay_title', $payment_method['settings']['multisafepay_title']);

    return commerce_multisafepay_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Builds a Website Payments Standard form from an order object.
 *   A renderable form array.
 */
function commerce_multisafepay_order_form($form, &$form_state, $order, $settings) {

    global $language;
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order->commerce_line_items;

    $item_list = '<ul>';


    foreach ($line_items as $key => $items) {
        foreach ($items as $item) {
            $item_object = commerce_line_item_load($item['line_item_id']);
            $title = commerce_line_item_title($item_object);
            $quantity = $item_object->quantity;
            //print_r($item_object);
            $item_list .= '<li>' . $title . ' x ' . $quantity . '</li>';
        }
    }
    $item_list .= '</ul>';



    $country = $wrapper->commerce_customer_billing->commerce_customer_address->country->value();
    $address = $wrapper->commerce_customer_billing->commerce_customer_address->thoroughfare->value();
    $street = $wrapper->commerce_customer_billing->commerce_customer_address->thoroughfare->value();
    $number = $wrapper->commerce_customer_billing->commerce_customer_address->premise->value();
    $postal_code = $wrapper->commerce_customer_billing->commerce_customer_address->postal_code->value();
    $first_name = $wrapper->commerce_customer_billing->commerce_customer_address->first_name->value();
    $last_name = $wrapper->commerce_customer_billing->commerce_customer_address->last_name->value();
    $city = $wrapper->commerce_customer_billing->commerce_customer_address->locality->value();
    $mail = $order->mail;
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $amount = $wrapper->commerce_order_total->amount->value();
    $langcode = $language->language . '_' . strtoupper($language->language);

    if (empty($first_name)) {
        $first_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();
    }


    // Ensure a default value for the payment_method setting.
    $settings += array('payment_method' => 'multisafepay');

    global $base_url;
    $msp = new MultiSafepay();
    $msp->test = $settings['multisafepay_test'];
    $msp->merchant['account_id'] = $settings['multisafepay_account_id'];
    $msp->merchant['site_id'] = $settings['multisafepay_site_id'];
    $msp->merchant['site_code'] = $settings['multisafepay_secure_code'];
    $msp->merchant['notification_url'] = multisafepay_helper()->getPostbackURL();
    $msp->merchant['cancel_url'] = multisafepay_helper()->getResultURL();
    $msp->merchant['redirect_url'] = multisafepay_helper()->getResultURL();
    $msp->merchant['close_window'] = true;
    $msp->customer['locale'] = $langcode;
    $msp->customer['firstname'] = $first_name;
    $msp->customer['lastname'] = $last_name;
    $msp->customer['zipcode'] = $postal_code;
    $msp->customer['city'] = $city;
    $msp->customer['email'] = $mail;
    //$msp->customer['phone']							= $order_info['telephone'];
    $msp->customer['country'] = $country;
    $msp->parseCustomerAddress($address);
    $msp->transaction['id'] = $order->data['commerce_multisafepay_orderid'];
    $msp->transaction['currency'] = $currency_code;
    $msp->transaction['amount'] = $amount;
    $msp->transaction['var1'] = $order->order_id;
    $msp->transaction['description'] = 'Order #' . $msp->transaction['id'];
    $msp->transaction['items'] = $item_list;
    $msp->plugin_name = 'Drupal Commerce 7.x-1.4';
    $msp->version = '(1.0.0)';

    $msp->plugin['shop'] = 'Drupal Commerce';
    $msp->plugin['shop_version'] = 'Unknown';
    $msp->plugin['plugin_version'] = '1.0.0';
    $msp->plugin['partner'] = '';
    $msp->plugin['shop_root_url'] = $base_url;






    if (isset($form_state['build_info']['args'][0]->data['commerce_multisafepay']['issuer'])) {
        $issuer = $form_state['build_info']['args'][0]->data['commerce_multisafepay']['issuer'];
    }

    if (isset($form_state['build_info']['args'][0]->data['commerce_multisafepay']['multisafepay_gateway'])) {
        $msp->transaction['gateway'] = $form_state['build_info']['args'][0]->data['commerce_multisafepay']['multisafepay_gateway'];
    }
    if (isset($issuer) && $msp->transaction['gateway'] == "IDEAL") {
        $msp->extravars = $issuer;
        $url = $msp->startDirectXMLTransaction();
    } else {
        $url = $msp->startTransaction();
    }

    if (!isset($msp->error)) {
        $form['#action'] = $url;
        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Start payment'),
        );
        return $form;
    } else {
        echo "Error " . $msp->error_code . ": " . $msp->error;
        exit();
    }
}

/**
 * Process the Success and Error URL
 *
 */
function commerce_multisafepay_process_result($settings = null) {
    $msp = new MultiSafepay();
    $msp->test = variable_get('multisafepay_test');
    $msp->merchant['account_id'] = variable_get('multisafepay_account_id');
    $msp->merchant['site_id'] = variable_get('multisafepay_site_id');
    $msp->merchant['site_code'] = variable_get('multisafepay_secure_code');
    $msp->transaction['id'] = $_GET['transactionid'];
    $status = $msp->getStatus();
    $details = $msp->details;
    if (!isset($msp->error)) {
        $next_url = '';
        $transaction = commerce_payment_transaction_load($_GET['transactionid']);
        $order = commerce_order_load($transaction->order_id);

        switch ($status) {
            case 'completed':
                $next_url = sprintf("checkout/%s/payment/return/%s", $order->order_id, $order->data['payment_redirect_key']);
                break;
            case 'initialized':
                $next_url = sprintf("checkout/%s/payment/return/%s", $order->order_id, $order->data['payment_redirect_key']);
                drupal_set_message(t("Awaiting transaction completion from the payment service provider, you will be updated once the amount has been charged."));
                break;
            default:
                $next_url = sprintf("checkout/%s/payment/back/%s", $order->order_id, $order->data['payment_redirect_key']); //'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];
                //drupal_set_message(t("The Payment service provider has returned the following message: ".$api->getStatus(true)), 'error');
                break;
        }
        drupal_goto($next_url);
    } else {
        echo 'ng';
    }
}

/**
 * Process the multisafepay Postback
 * 
 */
function commerce_multisafepay_process_postback($module, $type = null, $initial_request = null, $base_url = null) {
    $msp = new MultiSafepay();
    $msp->test = variable_get('multisafepay_test');
    $msp->merchant['account_id'] = variable_get('multisafepay_account_id');
    $msp->merchant['site_id'] = variable_get('multisafepay_site_id');
    $msp->merchant['site_code'] = variable_get('multisafepay_secure_code');
    $msp->transaction['id'] = $_GET['transactionid'];
    $status = $msp->getStatus();
    $details = $msp->details;
    //$initial_request									= (isset($_GET['type']) == 'initial');

    if (!isset($msp->error)) {
        $transaction = commerce_payment_transaction_load($_GET['transactionid']);
        $order = commerce_order_load($transaction->order_id);

        if ($transaction->remote_status == "INITIALIZED") {
            if ($transaction->remote_status == "INITIALIZED" && $status == 'completed' && $transaction->status != 'processing') {
                commerce_checkout_complete($order);
                $transaction->remote_status = strtoupper($status);
                $transaction->remote_id = $_GET['transactionid'];
                $transaction->payment_method = "commerce_payment_multisafepay";
                $transaction->status = 'processing';
                $transaction->message = $status;
                commerce_payment_transaction_save($transaction);
                /*
                 * 	http://drupalcontrib.org/api/drupal/contributions!commerce!modules!order!commerce_order.module/function/commerce_order_status_update/7
                 * 	check this url to test with the options. We need to verify if the emails are send out twice by error.
                 */
                commerce_order_status_update($order, 'processing');
            } elseif ($status == 'initialized') {
                //commerce_checkout_complete($order);
                $transaction->remote_status = strtoupper($status);
                $transaction->remote_id = $_GET['transactionid'];
                $transaction->payment_method = "commerce_payment_multisafepay";
                $transaction->status = 'pending';
                $transaction->message = $status;
                commerce_payment_transaction_save($transaction);
                commerce_order_status_update($order, 'pending');
            } elseif ($status == 'void' || $status == "expired" || $status == "declined") {
                //commerce_checkout_complete($order);
                $transaction->remote_status = strtoupper($status);
                $transaction->remote_id = $_GET['transactionid'];
                $transaction->payment_method = "commerce_payment_multisafepay";
                $transaction->status = 'canceled';
                $transaction->message = $status;
                commerce_payment_transaction_save($transaction);
                commerce_order_status_update($order, 'canceled');
            }
        }
    }

    if ($initial_request != null) {
        global $base_url;
        echo '<a href=' . $base_url . '>Klik hier om terug te keren naar de website</a>';
        exit;
    } else {
        echo 'OK';
        exit;
    }
}
